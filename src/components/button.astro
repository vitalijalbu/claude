---
const {
  class: className = '',
  variant = 'default',
  size = 'default',
  as = 'button',
  'aria-label': ariaLabel,
  children,
  href,
  type = 'button',
  gradient = false,
  ...props
} = Astro.props;

const variantClasses = {
  default: 'bg-primary text-primary-foreground shadow-xs hover:bg-primary/90',
  whatsapp: 'bg-[#128C7E] text-primary-foreground shadow-xs hover:bg-[#128C7E]/90',
  destructive: 'bg-destructive text-white shadow-xs hover:bg-destructive/90 focus-visible:ring-destructive/20',
  outline: 'border bg-background shadow-xs hover:bg-accent hover:text-accent-foreground',
  secondary: 'bg-secondary text-secondary-foreground shadow-xs hover:bg-secondary/80',
  ghost: 'hover:bg-accent hover:text-accent-foreground',
  link: 'text-primary underline-offset-4 hover:underline',
};

const sizeClasses = {
  default: 'h-10 px-4 py-2 has-[>svg]:px-3',
  sm: 'h-8 gap-1.5 px-3 has-[>svg]:px-2.5',
  lg: 'h-10 px-6 has-[>svg]:px-4',
  icon: 'size-9 p-0 !rounded-full',
};

const baseClasses =
  'cursor-pointer inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-lg font-medium transition-all disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none shrink-0 [&_svg]:shrink-0 outline-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 aria-invalid:border-destructive';

const gradientClass = gradient
  ? 'relative after:absolute after:inset-0 after:rounded-[inherit] after:pointer-events-none after:shadow-[inset_0_1px_0px_rgba(255,255,255,0.35),inset_0_-2px_0px_rgba(0,0,0,0.18)]'
  : '';
const classes = `${baseClasses} ${variantClasses[variant] || ''} ${sizeClasses[size] || ''} ${className} ${gradientClass}`;
---

{as === 'a' ? (
  <a
    class={classes}
    aria-label={ariaLabel}
    href={href}
    {...props}
  >
    <slot />
  </a>
) : as === 'div' ? (
  <div
    class={classes}
    aria-label={ariaLabel}
    {...props}
  >
    <slot />
  </div>
) : (
  <button class="btn btn-primary"
    class={classes}
    aria-label={ariaLabel}
    type={type}
    {...props}
  >
    <slot />
  </button>
)}
