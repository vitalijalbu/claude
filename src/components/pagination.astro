---
const { data } = Astro.props;
const { current_page, last_page } = data;

// Get base path without any existing /page/ segment
let basePath = Astro.url.pathname;
// Remove existing /page/x segment if present
basePath = basePath.replace(/\/page\/\d+$/, '');
// Ensure no trailing slash
basePath = basePath.replace(/\/$/, '') || '/';

// Extract current page from URL if present
let urlCurrentPage = 1;
const pageMatch = Astro.url.pathname.match(/\/page\/(\d+)$/);
if (pageMatch) {
  urlCurrentPage = parseInt(pageMatch[1]);
}

// Use URL page if data current_page doesn't match
const actualCurrentPage = urlCurrentPage;

function buildPageLink(page) {
  if (page === 1) {
    // For page 1, return the base path without /page/1
    return basePath === '/' ? '/' : basePath;
  }
  return `${basePath}/page/${page}`;
}

// Limita a max 3-4 pagine visibili
const visiblePages = [];
const start = Math.max(1, actualCurrentPage - 1);
const end = Math.min(last_page, actualCurrentPage + 2);

for (let i = start; i <= end; i++) {
  visiblePages.push(i);
}
---

{last_page > 1 && (
  <nav class="flex items-center gap-x-1 mx-auto w-fit py-4">
    {/* Previous */}
    <a
      href={actualCurrentPage > 1 ? buildPageLink(actualCurrentPage - 1) : "#"}
      class="btn btn-text"
    >
      Precedente
    </a>
    
    <div class="flex items-center gap-x-1">
      {/* Page numbers limitati */}
      {visiblePages.map((page) => (
        <a
          href={buildPageLink(page)}
          class="btn btn-text btn-square aria-[current='page']:text-bg-primary"
          aria-current={actualCurrentPage === page ? "page" : undefined}
        >
          {page}
        </a>
      ))}
    </div>

    {/* Next */}
    <a
      href={actualCurrentPage < last_page ? buildPageLink(actualCurrentPage + 1) : "#"}
      class="btn btn-text"
    >
      Successivo
    </a>
  </nav>
)}