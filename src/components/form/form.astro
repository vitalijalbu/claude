---
const {
  name,
  labelCol = 8,
  wrapperCol = 16,
  initialValues = {},
  autoComplete = "off",
  method = "POST",
  action = "",
  class: className = "",
  style = "max-width: 600px",
} = Astro.props;
---

<div 
  x-data={`formComponent({
    formName: '${name}',
    labelCol: ${labelCol},
    wrapperCol: ${wrapperCol},
    initialValues: ${JSON.stringify(initialValues)},
    formData: {},
    errors: {},

    init() {
      this.formData = {...this.initialValues};
      this.$el.dispatchEvent(new CustomEvent('form:init', { detail: { form: this } }));
    },

    validateField(fieldName) {
      const field = this.$el.querySelector(\`[name="\${fieldName}"]\`);
      if (!field) return;
      
      const rules = JSON.parse(field.dataset.rules || '[]');
      let error = null;

      for (const rule of rules) {
        if (rule.required && !this.formData[fieldName]) {
          error = rule.message || 'This field is required';
          break;
        }
        
        if (rule.pattern && this.formData[fieldName]) {
          const pattern = new RegExp(rule.pattern);
          if (!pattern.test(this.formData[fieldName])) {
            error = rule.message || 'Invalid format';
            break;
          }
        }
        
        if (rule.min && this.formData[fieldName]?.length < rule.min) {
          error = rule.message || \`Minimum \${rule.min} characters required\`;
          break;
        }
        
        if (rule.max && this.formData[fieldName]?.length > rule.max) {
          error = rule.message || \`Maximum \${rule.max} characters allowed\`;
          break;
        }
      }
      
      this.errors[fieldName] = error;
      return !error;
    },
    
    validateForm() {
      const fields = this.$el.querySelectorAll('[data-rules]');
      let isValid = true;
      
      fields.forEach(field => {
        if (!this.validateField(field.name)) {
          isValid = false;
        }
      });
      
      return isValid;
    },
    
    submitForm(e) {
      if (!this.validateForm()) {
        e.preventDefault();
        this.$dispatch('form:failed', { errors: this.errors });
        return;
      }
      
      this.$dispatch('form:submit', { data: this.formData });
      
      // If not using AJAX submission, let the form submit naturally
      if (${action !== ''}) {
        return true;
      }
      
      e.preventDefault();
    }
  })`}
  class={`form-container ${className}`}
  style={style}
>
  <form
    name={name}
    method={method}
    action={action}
    autocomplete={autoComplete}
    @submit.prevent="submitForm"
    class="space-y-6"
  >
    <slot />
  </form>
</div>

<script>
  document.addEventListener('alpine:init', () => {
    window.Alpine.data('formComponent', (config) => config);
  });
</script>
